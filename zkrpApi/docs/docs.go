// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/event": {
            "post": {
                "description": "null",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Add/Update event",
                "parameters": [
                    {
                        "description": "EventName",
                        "name": "eventName",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "[]Deagnosis",
                        "name": "deagnosis",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/selftype.Deagnosis"
                            }
                        }
                    },
                    {
                        "description": "[]Procedure",
                        "name": "procedure",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/selftype.Procedure"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/selftype.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    }
                }
            }
        },
        "/event/{eventName}": {
            "get": {
                "description": "Get an event from string",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "event search by eventName",
                        "name": "eventName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/selftype.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "event delete by eventName",
                        "name": "eventName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    }
                }
            }
        },
        "/prove": {
            "post": {
                "description": "Give a prove of ZKRP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZKRP"
                ],
                "summary": "Prove ZKRP",
                "parameters": [
                    {
                        "description": "requestTime",
                        "name": "requestTime",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "[]Deagnosis",
                        "name": "deagnosis",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/selftype.DeagnosisDate"
                            }
                        }
                    },
                    {
                        "description": "[]Procedure",
                        "name": "procedure",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/selftype.ProcedureDate"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/selftype.ProvePackagesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    }
                }
            }
        },
        "/verify": {
            "post": {
                "description": "Verify a prove of ZKRP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZKRP"
                ],
                "summary": "Verify ZKRP",
                "parameters": [
                    {
                        "description": "[]ProvePackage",
                        "name": "provePackages",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/selftype.ProvePackage"
                            }
                        }
                    },
                    {
                        "description": "userName",
                        "name": "userName",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/selftype.JSONResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "selftype.Deagnosis": {
            "type": "object",
            "properties": {
                "deagnosisCode": {
                    "type": "string",
                    "example": "J0190"
                },
                "duringTime": {
                    "type": "integer",
                    "example": 28
                }
            }
        },
        "selftype.DeagnosisDate": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "20200505"
                },
                "deagnosisCode": {
                    "type": "string",
                    "example": "J0190"
                },
                "duringTime": {
                    "type": "integer",
                    "example": 28
                }
            }
        },
        "selftype.Event": {
            "type": "object",
            "properties": {
                "deagnosis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/selftype.Deagnosis"
                    }
                },
                "eventName": {
                    "type": "string",
                    "example": "marathon"
                },
                "procedure": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/selftype.Procedure"
                    }
                },
                "varifyURL": {
                    "type": "string",
                    "example": "http://localhost:8080/verify"
                }
            }
        },
        "selftype.EventResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/selftype.Event"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "selftype.JSONResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "selftype.Procedure": {
            "type": "object",
            "properties": {
                "duringTime": {
                    "type": "integer",
                    "example": 28
                },
                "procedureCode": {
                    "type": "string",
                    "example": "3950"
                }
            }
        },
        "selftype.ProcedureDate": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "20200505"
                },
                "duringTime": {
                    "type": "integer",
                    "example": 28
                },
                "procedureCode": {
                    "type": "string",
                    "example": "3950"
                }
            }
        },
        "selftype.ProvePackage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "J0390"
                },
                "commitment": {
                    "type": "string",
                    "example": "0x1af2e641e834f6c503e0e6b9b593323342e7d45ad0aa299bc934110a4e13ae2f33c3a0fc695f397d51e8b4699b4d9f9397b3bc3e20fa42cb1a540ff8f19dc118"
                },
                "lowerbound": {
                    "type": "integer",
                    "example": 20200503
                },
                "prove": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "Deagnosis"
                },
                "upperbound": {
                    "type": "integer",
                    "example": 20200531
                }
            }
        },
        "selftype.ProvePackagesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/selftype.ProvePackage"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Swagger Example API",
	Description: "This is a sample server celler server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
